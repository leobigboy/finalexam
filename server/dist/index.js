"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// server/src/index.ts
const server_1 = require("@apollo/server");
const express4_1 = require("@apollo/server/express4");
const drainHttpServer_1 = require("@apollo/server/plugin/drainHttpServer");
const express_1 = __importDefault(require("express"));
const http_1 = __importDefault(require("http"));
const cors_1 = __importDefault(require("cors"));
const client_1 = require("@prisma/client");
const schema_1 = require("./schema"); // Import schema ƒë√£ ƒë·ªãnh nghƒ©a
const resolvers_1 = require("./resolvers"); // Import resolvers ƒë√£ tri·ªÉn khai
const auth_1 = require("./auth"); // Import h√†m x√°c th·ª±c v√† ki·ªÉu tr·∫£ v·ªÅ
require("dotenv/config"); // Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
const path_1 = __importDefault(require("path")); // Import path ƒë·ªÉ x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n file tƒ©nh
// --- Kh·ªüi t·∫°o Prisma Client ---
const prisma = new client_1.PrismaClient();
function startApolloServer() {
    return __awaiter(this, void 0, void 0, function* () {
        const app = (0, express_1.default)();
        // T·∫°o HTTP server ƒë·ªÉ t√≠ch h·ª£p v·ªõi Express v√† Apollo Server
        const httpServer = http_1.default.createServer(app);
        // --- Kh·ªüi t·∫°o Apollo Server ---
        const server = new server_1.ApolloServer({
            typeDefs: schema_1.typeDefs, // Schema GraphQL
            resolvers: // Schema GraphQL
            resolvers_1.resolvers, // Logic x·ª≠ l√Ω query/mutation
            plugins: [
                // Plugin ƒë·ªÉ ƒë√≥ng HTTP server m·ªôt c√°ch g·ªçn g√†ng khi Apollo Server d·ª´ng
                (0, drainHttpServer_1.ApolloServerPluginDrainHttpServer)({ httpServer })
            ],
            // B·∫≠t introspection ƒë·ªÉ d√πng GraphQL Playground/Sandbox trong m√¥i tr∆∞·ªùng development
            // T·∫Øt introspection trong m√¥i tr∆∞·ªùng production ƒë·ªÉ tƒÉng b·∫£o m·∫≠t
            introspection: process.env.NODE_ENV !== 'production',
        });
        // Kh·ªüi ƒë·ªông Apollo Server
        yield server.start();
        // --- C·∫•u h√¨nh Express Middleware ---
        // CORS: Cho ph√©p truy c·∫≠p t·ª´ c√°c origin kh√°c (quan tr·ªçng khi frontend ch·∫°y tr√™n port kh√°c)
        // C·∫•u h√¨nh ch·∫∑t ch·∫Ω h∆°n trong production (ch·ªâ cho ph√©p origin c·ªßa frontend)
        app.use((0, cors_1.default)());
        // Middleware ƒë·ªÉ parse JSON request body
        app.use(express_1.default.json());
        // Serve th∆∞ m·ª•c public/images nh∆∞ l√† file tƒ©nh t·∫°i route /images
        // ƒêi·ªÅu n√†y cho ph√©p truy c·∫≠p ·∫£nh b·∫±ng URL v√≠ d·ª•: http://<server>/images/placeholder.jpg
        const publicImagesPath = path_1.default.join(__dirname, '../public/images'); // ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn th∆∞ m·ª•c ·∫£nh
        app.use('/images', express_1.default.static(publicImagesPath));
        console.log(`Serving static files from: ${publicImagesPath}`);
        // Apollo Server Middleware: G·∫Øn Apollo Server v√†o endpoint /graphql c·ªßa Express
        app.use('/graphql', 
        // ƒê·∫£m b·∫£o CORS ƒë∆∞·ª£c √°p d·ª•ng cho endpoint GraphQL
        (0, cors_1.default)(), 
        // Middleware c·ªßa Apollo t√≠ch h·ª£p v·ªõi Express
        (0, express4_1.expressMiddleware)(server, {
            // H√†m context ƒë∆∞·ª£c g·ªçi cho m·ªói request GraphQL
            context: (_a) => __awaiter(this, [_a], void 0, function* ({ req }) {
                // L·∫•y token t·ª´ header 'Authorization' (v√≠ d·ª•: "Bearer <token>")
                const token = req.headers.authorization || '';
                // G·ªçi h√†m x√°c th·ª±c token v√† l·∫•y th√¥ng tin user (n·∫øu token h·ª£p l·ªá)
                const user = yield (0, auth_1.getUserFromToken)(token, prisma);
                // Tr·∫£ v·ªÅ context object ch·ª©a prisma client v√† th√¥ng tin user (ho·∫∑c null)
                // Context n√†y s·∫Ω ƒë∆∞·ª£c truy·ªÅn v√†o t·∫•t c·∫£ c√°c resolver
                return { prisma, currentUser: user };
            }),
        }));
        // --- Kh·ªüi ƒë·ªông HTTP Server ---
        const PORT = process.env.PORT || 4000;
        yield new Promise((resolve) => httpServer.listen({ port: PORT }, resolve));
        console.log(`üöÄ Server ready at http://localhost:${PORT}`);
        console.log(` GQL endpoint ready at http://localhost:${PORT}/graphql`);
        // Nh·∫Øc nh·ªü v·ªÅ port forwarding trong Codespaces
        console.log(`üéâ Check PORTS tab in Codespaces for the public URL!`);
    });
}
// G·ªçi h√†m ƒë·ªÉ b·∫Øt ƒë·∫ßu server v√† b·∫Øt l·ªói n·∫øu c√≥
startApolloServer().catch(error => {
    console.error("üí• Failed to start server:", error);
    prisma.$disconnect(); // ƒê·∫£m b·∫£o ƒë√≥ng k·∫øt n·ªëi Prisma n·∫øu server l·ªói
    process.exit(1);
});
// X·ª≠ l√Ω vi·ªác ƒë√≥ng k·∫øt n·ªëi Prisma khi ·ª©ng d·ª•ng tho√°t
process.on('SIGINT', () => __awaiter(void 0, void 0, void 0, function* () {
    yield prisma.$disconnect();
    process.exit(0);
}));
process.on('SIGTERM', () => __awaiter(void 0, void 0, void 0, function* () {
    yield prisma.$disconnect();
    process.exit(0);
}));
