// server/src/index.ts
import { ApolloServer } from '@apollo/server';
import { expressMiddleware } from '@apollo/server/express4';
import { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer';
import express, { Request, Response, NextFunction } from 'express'; // ƒê·∫£m b·∫£o import ƒë·ªß ki·ªÉu
import http from 'http';
import cors from 'cors';
import { PrismaClient } from '@prisma/client';
import { typeDefs } from './schema';
import { resolvers } from './resolvers';
import { getUserFromToken, UserAuthInfo } from './auth'; // V·∫´n import nh∆∞ng t·∫°m th·ªùi kh√¥ng d√πng trong context
import 'dotenv/config';
import path from 'path';

// ƒê·ªãnh nghƒ©a ki·ªÉu cho Context
export interface MyContext {
  prisma: PrismaClient;
  currentUser: UserAuthInfo | null;
}

// Kh·ªüi t·∫°o Prisma Client
const prisma = new PrismaClient();

async function startApolloServer() {
  // T·∫°o Express app v√† HTTP server
  const app = express();
  const httpServer = http.createServer(app);

  // Kh·ªüi t·∫°o Apollo Server
  const server = new ApolloServer<MyContext>({
    typeDefs,
    resolvers,
    plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],
    // T·∫Øt introspection trong production
    introspection: process.env.NODE_ENV !== 'production',
  });

  // Kh·ªüi ƒë·ªông Apollo Server
  await server.start();

  // --- C·∫•u h√¨nh Express Middleware ---

  // 1. CORS to√†n c·ª•c
  app.use(cors<cors.CorsRequest>());

  // 2. Middleware parse JSON body (QUAN TR·ªåNG: Ph·∫£i tr∆∞·ªõc Apollo Middleware)
  app.use(express.json());

  // 3. Middleware serve file tƒ©nh t·ª´ th∆∞ m·ª•c public/images t·∫°i route /images
  const publicImagesPath = path.join(__dirname, '../public/images');
  app.use('/images', express.static(publicImagesPath));
  console.log(`Serving static files from: ${publicImagesPath}`);

  // 4. Middleware c·ªßa Apollo Server cho endpoint /graphql
  app.use(
    '/graphql',
    // cors<cors.CorsRequest>(), // Kh√¥ng c·∫ßn CORS ·ªü ƒë√¢y n·ªØa v√¨ ƒë√£ c√≥ ·ªü tr√™n
    expressMiddleware<MyContext>(server, {
      // --- CONTEXT ƒê√É ƒê∆Ø·ª¢C ƒê∆†N GI·∫¢N H√ìA ---
      context: async ({ req }): Promise<MyContext> => {
          // T·∫°m th·ªùi kh√¥ng x·ª≠ l√Ω token/user ƒë·ªÉ debug l·ªói "req.body"
          // const token = req.headers.authorization || '';
          // const user = await getUserFromToken(token, prisma);
          // console.log('Simplified context executing'); // B·ªè comment n·∫øu c·∫ßn log
          return { prisma, currentUser: null }; // Lu√¥n tr·∫£ v·ªÅ context t·ªëi thi·ªÉu
      },
      // --- K·∫æT TH√öC ƒê∆†N GI·∫¢N H√ìA ---
    }) as any // <<< Gi·ªØ l·∫°i 'as any' ƒë·ªÉ b·ªè qua l·ªói type TS2769 n·∫øu n√≥ v·∫´n xu·∫•t hi·ªán
  );

  // --- Kh·ªüi ƒë·ªông HTTP Server ---
  const PORT = process.env.PORT || 4000;
  await new Promise<void>((resolve) => httpServer.listen({ port: PORT }, resolve));

  console.log(`üöÄ Server ready at http://localhost:${PORT}`);
  console.log(` GQL endpoint ready at http://localhost:${PORT}/graphql`);
  console.log(`üéâ Check PORTS tab in Codespaces for the public URL!`);
}

// Ch·∫°y server v√† x·ª≠ l√Ω l·ªói
startApolloServer().catch(error => {
  console.error("üí• Failed to start server:", error);
  prisma.$disconnect();
  process.exit(1);
});

// ƒê·∫£m b·∫£o ƒë√≥ng k·∫øt n·ªëi Prisma khi tho√°t ·ª©ng d·ª•ng
process.on('SIGINT', async () => {
  await prisma.$disconnect();
  console.log('Prisma Client disconnected on SIGINT');
  process.exit(0);
});
process.on('SIGTERM', async () => {
  await prisma.$disconnect();
  console.log('Prisma Client disconnected on SIGTERM');
  process.exit(0);
});